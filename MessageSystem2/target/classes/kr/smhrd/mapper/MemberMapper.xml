<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.smhrd.mapper.MemberMapper">

	<!-- 인터페이스에서 mapper로 넘어올 수 있는 조건
		namespace가 interface 이름과 동일 하던가
		xml파일과 interface이름이 동일하면 자동으로 맞춰줌
	 -->
	 
	<!-- id값을 메소드 이름과 동일하게 하면 알아서 찾음 -->
	<insert id="memberInsert" parameterType="kr.smhrd.entity.Member">
		<!-- insert into member values(CONCAT(#{email}, '@', #{email_domain}), #{pw}, #{phone}, #{address},#{name},#{birth},#{gender}) -->
		insert into tb_cust (cust_pw, cust_name, cust_nick, cust_email, cust_phone, cust_birthdate, cust_gender, cust_addr, joined_at, cust_role)
		 values (SHA2(#{cust_pw},224),#{cust_name}, #{cust_nick},CONCAT(#{cust_email}, '@', #{email_domain}), #{cust_phone}, #{cust_birthdate}, #{cust_gender}, #{cust_addr}, NOW(), 'U');
	</insert>  

	<update id="updateMember" parameterType="kr.smhrd.entity.Member">
		update tb_cust set 
		cust_phone=#{cust_phone}, cust_pw=SHA2(#{cust_pw},224), cust_nick=#{cust_nick},cust_email=#{cust_email},cust_birthdate=#{cust_birthdate}, cust_addr=#{cust_addr} where cust_id=#{cust_id}
	</update>

	<select id="showMember" resultType="kr.smhrd.entity.Member">
		select * from member where not(email='admin')
	</select>
	
	<delete id="memberMapper" parameterType="String">
		delete from member where email=#{email}
	</delete>
	<select id="memberlogin" parameterType="kr.smhrd.entity.Member" resultType="kr.smhrd.entity.Member">

    select * from tb_cust where cust_phone=#{cust_phone} and  cust_pw=SHA2(#{cust_pw},224) 
	</select>


	<insert id="sellerInsert" parameterType="kr.smhrd.entity.Member">
		insert into tb_seller (cust_id, company_name, company_addr, company_bno, business_type, certified_yn, created_at)
		values(#{cust_id}, #{company_name}, #{company_addr}, #{company_bno}, #{business_type}, 'N', now())
	</insert>
	
	<update id="sellerUpdate" parameterType="kr.smhrd.entity.Member">
	update tb_cust set cust_role='S' where cust_id=#{cust_id}
	</update>
	
	<insert id="goLike" parameterType="kr.smhrd.entity.Member">
	insert into tb_favorite(cust_id,prod_idx,created_at)
	values(#{cust_id},#{prod_idx},NOW())
	</insert>
	
	<delete id="removeLike" parameterType="kr.smhrd.entity.Member">
	delete from tb_favorite where cust_id=#{cust_id} and prod_idx=#{prod_idx};
	</delete>
	
	<select id="searchLike" parameterType="kr.smhrd.entity.Member" resultType="Int">
	select count(*) from tb_favorite where cust_id=#{cust_id} and prod_idx=#{prod_idx}
	</select>
	
	<select id="likeList" parameterType="String" resultType="kr.smhrd.entity.Member">
SELECT
    p.prod_idx AS prod_idx,
    p.prod_name AS prod_name,
    p.prod_price AS prod_price,
    di.img_name AS img_name
FROM
    tb_favorite f
JOIN
    tb_prod p ON f.prod_idx = p.prod_idx
JOIN
    tb_prod_image di ON p.prod_idx = di.prod_idx
WHERE
    f.cust_id = #{cust_id};
</select>

	<select id="reviewList" parameterType="String" resultType="kr.smhrd.entity.Member">
 SELECT
    r.*,
    pi_review.img_name AS review_img_name,
    p.prod_name AS prod_name,
    p.prod_idx AS prod_idx,
    pi_product.img_name AS product_img_name
FROM
    tb_review r
LEFT JOIN
    tb_prod_image pi_review ON r.prod_idx = pi_review.prod_idx
LEFT JOIN
    tb_prod p ON r.prod_idx = p.prod_idx
LEFT JOIN
    tb_prod_image pi_product ON p.prod_idx = pi_product.prod_idx
WHERE
    r.cust_id = #{cust_id};
</select>

<delete id="reviewDelete" parameterType="kr.smhrd.entity.Member" >
delete from tb_review where cust_id = #{cust_id} and prod_idx = #{prod_idx}
</delete>

<select id="searchQna" parameterType="String" resultType="kr.smhrd.entity.Member">
SELECT
    q.qna_idx AS qna_idx,
    q.cust_id AS cust_id,
    q.prod_idx AS prod_idx,
    q.question AS question,
    q.questioned_at AS questioned_at,
    q.answer AS answer,
    q.answered_at AS answered_at,
    p.prod_name AS prod_name,
    pi.img_name AS prod_image_name,
    p.cust_id AS product_customer_id,
    s.company_name AS seller_company_name
FROM
    tb_qna q
JOIN
    tb_prod p ON q.prod_idx = p.prod_idx
LEFT JOIN
    tb_prod_image pi ON p.prod_idx = pi.prod_idx
LEFT JOIN
    tb_seller s ON q.cust_id = s.cust_id
WHERE
    q.cust_id = #{cust_id};
</select>

<delete id="qnaDelete" parameterType="kr.smhrd.entity.Member">
delete from tb_qna where cust_id = #{cust_id} and prod_idx = #{prod_idx}

</delete>


</mapper>